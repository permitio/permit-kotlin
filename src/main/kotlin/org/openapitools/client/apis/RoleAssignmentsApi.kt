/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.HTTPValidationError
import org.openapitools.client.models.RoleAssignmentCreate
import org.openapitools.client.models.RoleAssignmentRead
import org.openapitools.client.models.RoleAssignmentRemove

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class RoleAssignmentsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Assign Role
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param roleAssignmentCreate 
     * @return RoleAssignmentRead
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun assignRole(projId: kotlin.String, envId: kotlin.String, roleAssignmentCreate: RoleAssignmentCreate) : RoleAssignmentRead {
        val localVarResponse = assignRoleWithHttpInfo(projId = projId, envId = envId, roleAssignmentCreate = roleAssignmentCreate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RoleAssignmentRead
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Assign Role
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param roleAssignmentCreate 
     * @return ApiResponse<RoleAssignmentRead?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun assignRoleWithHttpInfo(projId: kotlin.String, envId: kotlin.String, roleAssignmentCreate: RoleAssignmentCreate) : ApiResponse<RoleAssignmentRead?> {
        val localVariableConfig = assignRoleRequestConfig(projId = projId, envId = envId, roleAssignmentCreate = roleAssignmentCreate)

        return request<RoleAssignmentCreate, RoleAssignmentRead>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation assignRole
     *
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param roleAssignmentCreate 
     * @return RequestConfig
     */
    fun assignRoleRequestConfig(projId: kotlin.String, envId: kotlin.String, roleAssignmentCreate: RoleAssignmentCreate) : RequestConfig<RoleAssignmentCreate> {
        val localVariableBody = roleAssignmentCreate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/facts/{proj_id}/{env_id}/role_assignments".replace("{"+"proj_id"+"}", encodeURIComponent(projId.toString())).replace("{"+"env_id"+"}", encodeURIComponent(envId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List Role Assignments
     * Lists the role assignments defined within an environment.  - If the &#x60;user&#x60; filter is present, will only return the role assignments of that user. - If the &#x60;tenant&#x60; filter is present, will only return the role assignments in that tenant. - If the &#x60;role&#x60; filter is present, will only return role assignments that are granting that role.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param user optional user filter, will only return role assignments granted to this user. (optional)
     * @param role optional role filter, will only return role assignments granting this role. (optional)
     * @param tenant optional tenant filter, will only return role assignments granted in that tenant. (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return kotlin.collections.List<RoleAssignmentRead>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listRoleAssignments(projId: kotlin.String, envId: kotlin.String, user: kotlin.String? = null, role: kotlin.String? = null, tenant: kotlin.String? = null, page: kotlin.Int? = 1, perPage: kotlin.Int? = 30) : kotlin.collections.List<RoleAssignmentRead> {
        val localVarResponse = listRoleAssignmentsWithHttpInfo(projId = projId, envId = envId, user = user, role = role, tenant = tenant, page = page, perPage = perPage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<RoleAssignmentRead>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List Role Assignments
     * Lists the role assignments defined within an environment.  - If the &#x60;user&#x60; filter is present, will only return the role assignments of that user. - If the &#x60;tenant&#x60; filter is present, will only return the role assignments in that tenant. - If the &#x60;role&#x60; filter is present, will only return role assignments that are granting that role.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param user optional user filter, will only return role assignments granted to this user. (optional)
     * @param role optional role filter, will only return role assignments granting this role. (optional)
     * @param tenant optional tenant filter, will only return role assignments granted in that tenant. (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse<kotlin.collections.List<RoleAssignmentRead>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listRoleAssignmentsWithHttpInfo(projId: kotlin.String, envId: kotlin.String, user: kotlin.String?, role: kotlin.String?, tenant: kotlin.String?, page: kotlin.Int?, perPage: kotlin.Int?) : ApiResponse<kotlin.collections.List<RoleAssignmentRead>?> {
        val localVariableConfig = listRoleAssignmentsRequestConfig(projId = projId, envId = envId, user = user, role = role, tenant = tenant, page = page, perPage = perPage)

        return request<Unit, kotlin.collections.List<RoleAssignmentRead>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listRoleAssignments
     *
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param user optional user filter, will only return role assignments granted to this user. (optional)
     * @param role optional role filter, will only return role assignments granting this role. (optional)
     * @param tenant optional tenant filter, will only return role assignments granted in that tenant. (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return RequestConfig
     */
    fun listRoleAssignmentsRequestConfig(projId: kotlin.String, envId: kotlin.String, user: kotlin.String?, role: kotlin.String?, tenant: kotlin.String?, page: kotlin.Int?, perPage: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
                if (role != null) {
                    put("role", listOf(role.toString()))
                }
                if (tenant != null) {
                    put("tenant", listOf(tenant.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (perPage != null) {
                    put("per_page", listOf(perPage.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/facts/{proj_id}/{env_id}/role_assignments".replace("{"+"proj_id"+"}", encodeURIComponent(projId.toString())).replace("{"+"env_id"+"}", encodeURIComponent(envId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Unassign Role
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param roleAssignmentRemove 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unassignRole(projId: kotlin.String, envId: kotlin.String, roleAssignmentRemove: RoleAssignmentRemove) : Unit {
        val localVarResponse = unassignRoleWithHttpInfo(projId = projId, envId = envId, roleAssignmentRemove = roleAssignmentRemove)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Unassign Role
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param roleAssignmentRemove 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun unassignRoleWithHttpInfo(projId: kotlin.String, envId: kotlin.String, roleAssignmentRemove: RoleAssignmentRemove) : ApiResponse<Unit?> {
        val localVariableConfig = unassignRoleRequestConfig(projId = projId, envId = envId, roleAssignmentRemove = roleAssignmentRemove)

        return request<RoleAssignmentRemove, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unassignRole
     *
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param roleAssignmentRemove 
     * @return RequestConfig
     */
    fun unassignRoleRequestConfig(projId: kotlin.String, envId: kotlin.String, roleAssignmentRemove: RoleAssignmentRemove) : RequestConfig<RoleAssignmentRemove> {
        val localVariableBody = roleAssignmentRemove
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v2/facts/{proj_id}/{env_id}/role_assignments".replace("{"+"proj_id"+"}", encodeURIComponent(projId.toString())).replace("{"+"env_id"+"}", encodeURIComponent(envId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
