/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DetailedAuditLog
import org.openapitools.client.models.HTTPValidationError
import org.openapitools.client.models.PaginatedResultAuditLog

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AuditLogsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Get detailed audit log
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param logId The unique id of the audit log
     * @return DetailedAuditLog
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDetailedAuditLog(projId: kotlin.String, envId: kotlin.String, logId: java.util.UUID) : DetailedAuditLog {
        val localVarResponse = getDetailedAuditLogWithHttpInfo(projId = projId, envId = envId, logId = logId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DetailedAuditLog
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get detailed audit log
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param logId The unique id of the audit log
     * @return ApiResponse<DetailedAuditLog?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDetailedAuditLogWithHttpInfo(projId: kotlin.String, envId: kotlin.String, logId: java.util.UUID) : ApiResponse<DetailedAuditLog?> {
        val localVariableConfig = getDetailedAuditLogRequestConfig(projId = projId, envId = envId, logId = logId)

        return request<Unit, DetailedAuditLog>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDetailedAuditLog
     *
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param logId The unique id of the audit log
     * @return RequestConfig
     */
    fun getDetailedAuditLogRequestConfig(projId: kotlin.String, envId: kotlin.String, logId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/pdps/{proj_id}/{env_id}/audit_logs/{log_id}".replace("{"+"proj_id"+"}", encodeURIComponent(projId.toString())).replace("{"+"env_id"+"}", encodeURIComponent(envId.toString())).replace("{"+"log_id"+"}", encodeURIComponent(logId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List Audit Logs
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param pdpId Filter by pdp config id (optional)
     * @param users List of user keys or emails to filter by (optional)
     * @param decision Filter by decision result (optional)
     * @param resources Filter by resources (optional)
     * @param tenant Filter by tenant (optional)
     * @param action Filter by action (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return PaginatedResultAuditLog
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listAuditLogs(projId: kotlin.String, envId: kotlin.String, pdpId: java.util.UUID? = null, users: kotlin.collections.List<kotlin.String>? = null, decision: kotlin.Boolean? = null, resources: kotlin.collections.List<kotlin.String>? = null, tenant: kotlin.String? = null, action: kotlin.String? = null, timestampFrom: kotlin.Int? = null, timestampTo: kotlin.Int? = null, page: kotlin.Int? = 1, perPage: kotlin.Int? = 30) : PaginatedResultAuditLog {
        val localVarResponse = listAuditLogsWithHttpInfo(projId = projId, envId = envId, pdpId = pdpId, users = users, decision = decision, resources = resources, tenant = tenant, action = action, timestampFrom = timestampFrom, timestampTo = timestampTo, page = page, perPage = perPage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedResultAuditLog
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List Audit Logs
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param pdpId Filter by pdp config id (optional)
     * @param users List of user keys or emails to filter by (optional)
     * @param decision Filter by decision result (optional)
     * @param resources Filter by resources (optional)
     * @param tenant Filter by tenant (optional)
     * @param action Filter by action (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse<PaginatedResultAuditLog?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listAuditLogsWithHttpInfo(projId: kotlin.String, envId: kotlin.String, pdpId: java.util.UUID?, users: kotlin.collections.List<kotlin.String>?, decision: kotlin.Boolean?, resources: kotlin.collections.List<kotlin.String>?, tenant: kotlin.String?, action: kotlin.String?, timestampFrom: kotlin.Int?, timestampTo: kotlin.Int?, page: kotlin.Int?, perPage: kotlin.Int?) : ApiResponse<PaginatedResultAuditLog?> {
        val localVariableConfig = listAuditLogsRequestConfig(projId = projId, envId = envId, pdpId = pdpId, users = users, decision = decision, resources = resources, tenant = tenant, action = action, timestampFrom = timestampFrom, timestampTo = timestampTo, page = page, perPage = perPage)

        return request<Unit, PaginatedResultAuditLog>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listAuditLogs
     *
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
     * @param pdpId Filter by pdp config id (optional)
     * @param users List of user keys or emails to filter by (optional)
     * @param decision Filter by decision result (optional)
     * @param resources Filter by resources (optional)
     * @param tenant Filter by tenant (optional)
     * @param action Filter by action (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return RequestConfig
     */
    fun listAuditLogsRequestConfig(projId: kotlin.String, envId: kotlin.String, pdpId: java.util.UUID?, users: kotlin.collections.List<kotlin.String>?, decision: kotlin.Boolean?, resources: kotlin.collections.List<kotlin.String>?, tenant: kotlin.String?, action: kotlin.String?, timestampFrom: kotlin.Int?, timestampTo: kotlin.Int?, page: kotlin.Int?, perPage: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pdpId != null) {
                    put("pdp_id", listOf(pdpId.toString()))
                }
                if (users != null) {
                    put("users", toMultiValue(users.toList(), "multi"))
                }
                if (decision != null) {
                    put("decision", listOf(decision.toString()))
                }
                if (resources != null) {
                    put("resources", toMultiValue(resources.toList(), "multi"))
                }
                if (tenant != null) {
                    put("tenant", listOf(tenant.toString()))
                }
                if (action != null) {
                    put("action", listOf(action.toString()))
                }
                if (timestampFrom != null) {
                    put("timestamp_from", listOf(timestampFrom.toString()))
                }
                if (timestampTo != null) {
                    put("timestamp_to", listOf(timestampTo.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (perPage != null) {
                    put("per_page", listOf(perPage.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v2/pdps/{proj_id}/{env_id}/audit_logs".replace("{"+"proj_id"+"}", encodeURIComponent(projId.toString())).replace("{"+"env_id"+"}", encodeURIComponent(envId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
