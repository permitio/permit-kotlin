/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * @param key A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
 * @param resource the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
 * @param id Unique id of the resource instance
 * @param organizationId Unique id of the organization that the resource instance belongs to.
 * @param projectId Unique id of the project that the resource instance belongs to.
 * @param environmentId Unique id of the environment that the resource instance belongs to.
 * @param createdAt Date and time when the resource instance was created (ISO_8601 format).
 * @param updatedAt Date and time when the resource instance was last updated/modified (ISO_8601 format).
 * @param resourceId the id of the resource (type) of this resource instance.
 * @param tenant the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
 * @param tenantId the id of the tenant of this resource instance.
 * @param attributes Arbitraty resource attributes that will be used to enforce attribute-based access control policies.
 */


data class ResourceInstanceRead (

    /* A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly. */
    @Json(name = "key")
    val key: kotlin.String,

    /* the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`. */
    @Json(name = "resource")
    val resource: kotlin.String,

    /* Unique id of the resource instance */
    @Json(name = "id")
    val id: java.util.UUID,

    /* Unique id of the organization that the resource instance belongs to. */
    @Json(name = "organization_id")
    val organizationId: java.util.UUID,

    /* Unique id of the project that the resource instance belongs to. */
    @Json(name = "project_id")
    val projectId: java.util.UUID,

    /* Unique id of the environment that the resource instance belongs to. */
    @Json(name = "environment_id")
    val environmentId: java.util.UUID,

    /* Date and time when the resource instance was created (ISO_8601 format). */
    @Json(name = "created_at")
    val createdAt: java.time.OffsetDateTime,

    /* Date and time when the resource instance was last updated/modified (ISO_8601 format). */
    @Json(name = "updated_at")
    val updatedAt: java.time.OffsetDateTime,

    /* the id of the resource (type) of this resource instance. */
    @Json(name = "resource_id")
    val resourceId: java.util.UUID,

    /* the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps. */
    @Json(name = "tenant")
    val tenant: kotlin.String? = null,

    /* the id of the tenant of this resource instance. */
    @Json(name = "tenant_id")
    val tenantId: java.util.UUID? = null,

    /* Arbitraty resource attributes that will be used to enforce attribute-based access control policies. */
    @Json(name = "attributes")
    val attributes: kotlin.Any? = null

)

